/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { GenreService } from "../genre.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GenreCreateInput } from "./GenreCreateInput";
import { Genre } from "./Genre";
import { GenreFindManyArgs } from "./GenreFindManyArgs";
import { GenreWhereUniqueInput } from "./GenreWhereUniqueInput";
import { GenreUpdateInput } from "./GenreUpdateInput";
import { SongFindManyArgs } from "../../song/base/SongFindManyArgs";
import { Song } from "../../song/base/Song";
import { SongWhereUniqueInput } from "../../song/base/SongWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class GenreControllerBase {
  constructor(
    protected readonly service: GenreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Genre })
  @nestAccessControl.UseRoles({
    resource: "Genre",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: GenreCreateInput,
  })
  async createGenre(@common.Body() data: GenreCreateInput): Promise<Genre> {
    return await this.service.createGenre({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Genre] })
  @ApiNestedQuery(GenreFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Genre",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async genres(@common.Req() request: Request): Promise<Genre[]> {
    const args = plainToClass(GenreFindManyArgs, request.query);
    return this.service.genres({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Genre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Genre",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async genre(
    @common.Param() params: GenreWhereUniqueInput
  ): Promise<Genre | null> {
    const result = await this.service.genre({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Genre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Genre",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: GenreUpdateInput,
  })
  async updateGenre(
    @common.Param() params: GenreWhereUniqueInput,
    @common.Body() data: GenreUpdateInput
  ): Promise<Genre | null> {
    try {
      return await this.service.updateGenre({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Genre })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Genre",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteGenre(
    @common.Param() params: GenreWhereUniqueInput
  ): Promise<Genre | null> {
    try {
      return await this.service.deleteGenre({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/songs")
  @ApiNestedQuery(SongFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "read",
    possession: "any",
  })
  async findSongs(
    @common.Req() request: Request,
    @common.Param() params: GenreWhereUniqueInput
  ): Promise<Song[]> {
    const query = plainToClass(SongFindManyArgs, request.query);
    const results = await this.service.findSongs(params.id, {
      ...query,
      select: {
        artist: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        difficultyLevel: {
          select: {
            id: true,
          },
        },

        genre: {
          select: {
            id: true,
          },
        },

        id: true,

        language: {
          select: {
            id: true,
          },
        },

        lyrics: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/songs")
  @nestAccessControl.UseRoles({
    resource: "Genre",
    action: "update",
    possession: "any",
  })
  async connectSongs(
    @common.Param() params: GenreWhereUniqueInput,
    @common.Body() body: SongWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      songs: {
        connect: body,
      },
    };
    await this.service.updateGenre({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/songs")
  @nestAccessControl.UseRoles({
    resource: "Genre",
    action: "update",
    possession: "any",
  })
  async updateSongs(
    @common.Param() params: GenreWhereUniqueInput,
    @common.Body() body: SongWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      songs: {
        set: body,
      },
    };
    await this.service.updateGenre({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/songs")
  @nestAccessControl.UseRoles({
    resource: "Genre",
    action: "update",
    possession: "any",
  })
  async disconnectSongs(
    @common.Param() params: GenreWhereUniqueInput,
    @common.Body() body: SongWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      songs: {
        disconnect: body,
      },
    };
    await this.service.updateGenre({
      where: params,
      data,
      select: { id: true },
    });
  }
}
