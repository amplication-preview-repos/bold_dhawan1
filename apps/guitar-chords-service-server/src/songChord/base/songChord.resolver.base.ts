/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SongChord } from "./SongChord";
import { SongChordCountArgs } from "./SongChordCountArgs";
import { SongChordFindManyArgs } from "./SongChordFindManyArgs";
import { SongChordFindUniqueArgs } from "./SongChordFindUniqueArgs";
import { CreateSongChordArgs } from "./CreateSongChordArgs";
import { UpdateSongChordArgs } from "./UpdateSongChordArgs";
import { DeleteSongChordArgs } from "./DeleteSongChordArgs";
import { Chord } from "../../chord/base/Chord";
import { Song } from "../../song/base/Song";
import { SongChordService } from "../songChord.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SongChord)
export class SongChordResolverBase {
  constructor(
    protected readonly service: SongChordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SongChord",
    action: "read",
    possession: "any",
  })
  async _songChordsMeta(
    @graphql.Args() args: SongChordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SongChord])
  @nestAccessControl.UseRoles({
    resource: "SongChord",
    action: "read",
    possession: "any",
  })
  async songChords(
    @graphql.Args() args: SongChordFindManyArgs
  ): Promise<SongChord[]> {
    return this.service.songChords(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SongChord, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SongChord",
    action: "read",
    possession: "own",
  })
  async songChord(
    @graphql.Args() args: SongChordFindUniqueArgs
  ): Promise<SongChord | null> {
    const result = await this.service.songChord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SongChord)
  @nestAccessControl.UseRoles({
    resource: "SongChord",
    action: "create",
    possession: "any",
  })
  async createSongChord(
    @graphql.Args() args: CreateSongChordArgs
  ): Promise<SongChord> {
    return await this.service.createSongChord({
      ...args,
      data: {
        ...args.data,

        chord: args.data.chord
          ? {
              connect: args.data.chord,
            }
          : undefined,

        song: args.data.song
          ? {
              connect: args.data.song,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SongChord)
  @nestAccessControl.UseRoles({
    resource: "SongChord",
    action: "update",
    possession: "any",
  })
  async updateSongChord(
    @graphql.Args() args: UpdateSongChordArgs
  ): Promise<SongChord | null> {
    try {
      return await this.service.updateSongChord({
        ...args,
        data: {
          ...args.data,

          chord: args.data.chord
            ? {
                connect: args.data.chord,
              }
            : undefined,

          song: args.data.song
            ? {
                connect: args.data.song,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SongChord)
  @nestAccessControl.UseRoles({
    resource: "SongChord",
    action: "delete",
    possession: "any",
  })
  async deleteSongChord(
    @graphql.Args() args: DeleteSongChordArgs
  ): Promise<SongChord | null> {
    try {
      return await this.service.deleteSongChord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Chord, {
    nullable: true,
    name: "chord",
  })
  @nestAccessControl.UseRoles({
    resource: "Chord",
    action: "read",
    possession: "any",
  })
  async getChord(@graphql.Parent() parent: SongChord): Promise<Chord | null> {
    const result = await this.service.getChord(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Song, {
    nullable: true,
    name: "song",
  })
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "read",
    possession: "any",
  })
  async getSong(@graphql.Parent() parent: SongChord): Promise<Song | null> {
    const result = await this.service.getSong(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
