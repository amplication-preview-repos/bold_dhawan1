/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SongChord as PrismaSongChord,
  Chord as PrismaChord,
  Song as PrismaSong,
} from "@prisma/client";

export class SongChordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SongChordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.songChord.count(args);
  }

  async songChords(
    args: Prisma.SongChordFindManyArgs
  ): Promise<PrismaSongChord[]> {
    return this.prisma.songChord.findMany(args);
  }
  async songChord(
    args: Prisma.SongChordFindUniqueArgs
  ): Promise<PrismaSongChord | null> {
    return this.prisma.songChord.findUnique(args);
  }
  async createSongChord(
    args: Prisma.SongChordCreateArgs
  ): Promise<PrismaSongChord> {
    return this.prisma.songChord.create(args);
  }
  async updateSongChord(
    args: Prisma.SongChordUpdateArgs
  ): Promise<PrismaSongChord> {
    return this.prisma.songChord.update(args);
  }
  async deleteSongChord(
    args: Prisma.SongChordDeleteArgs
  ): Promise<PrismaSongChord> {
    return this.prisma.songChord.delete(args);
  }

  async getChord(parentId: string): Promise<PrismaChord | null> {
    return this.prisma.songChord
      .findUnique({
        where: { id: parentId },
      })
      .chord();
  }

  async getSong(parentId: string): Promise<PrismaSong | null> {
    return this.prisma.songChord
      .findUnique({
        where: { id: parentId },
      })
      .song();
  }
}
