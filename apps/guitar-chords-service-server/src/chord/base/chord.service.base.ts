/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Chord as PrismaChord,
  SongChord as PrismaSongChord,
} from "@prisma/client";

export class ChordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ChordCountArgs, "select">): Promise<number> {
    return this.prisma.chord.count(args);
  }

  async chords(args: Prisma.ChordFindManyArgs): Promise<PrismaChord[]> {
    return this.prisma.chord.findMany(args);
  }
  async chord(args: Prisma.ChordFindUniqueArgs): Promise<PrismaChord | null> {
    return this.prisma.chord.findUnique(args);
  }
  async createChord(args: Prisma.ChordCreateArgs): Promise<PrismaChord> {
    return this.prisma.chord.create(args);
  }
  async updateChord(args: Prisma.ChordUpdateArgs): Promise<PrismaChord> {
    return this.prisma.chord.update(args);
  }
  async deleteChord(args: Prisma.ChordDeleteArgs): Promise<PrismaChord> {
    return this.prisma.chord.delete(args);
  }

  async findSongChords(
    parentId: string,
    args: Prisma.SongChordFindManyArgs
  ): Promise<PrismaSongChord[]> {
    return this.prisma.chord
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .songChords(args);
  }
}
