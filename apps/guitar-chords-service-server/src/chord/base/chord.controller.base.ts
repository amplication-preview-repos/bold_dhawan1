/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ChordService } from "../chord.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ChordCreateInput } from "./ChordCreateInput";
import { Chord } from "./Chord";
import { ChordFindManyArgs } from "./ChordFindManyArgs";
import { ChordWhereUniqueInput } from "./ChordWhereUniqueInput";
import { ChordUpdateInput } from "./ChordUpdateInput";
import { SongChordFindManyArgs } from "../../songChord/base/SongChordFindManyArgs";
import { SongChord } from "../../songChord/base/SongChord";
import { SongChordWhereUniqueInput } from "../../songChord/base/SongChordWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ChordControllerBase {
  constructor(
    protected readonly service: ChordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Chord })
  @nestAccessControl.UseRoles({
    resource: "Chord",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ChordCreateInput,
  })
  async createChord(@common.Body() data: ChordCreateInput): Promise<Chord> {
    return await this.service.createChord({
      data: data,
      select: {
        createdAt: true,
        diagram: true,
        fingerPositions: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Chord] })
  @ApiNestedQuery(ChordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Chord",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async chords(@common.Req() request: Request): Promise<Chord[]> {
    const args = plainToClass(ChordFindManyArgs, request.query);
    return this.service.chords({
      ...args,
      select: {
        createdAt: true,
        diagram: true,
        fingerPositions: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Chord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Chord",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async chord(
    @common.Param() params: ChordWhereUniqueInput
  ): Promise<Chord | null> {
    const result = await this.service.chord({
      where: params,
      select: {
        createdAt: true,
        diagram: true,
        fingerPositions: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Chord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Chord",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ChordUpdateInput,
  })
  async updateChord(
    @common.Param() params: ChordWhereUniqueInput,
    @common.Body() data: ChordUpdateInput
  ): Promise<Chord | null> {
    try {
      return await this.service.updateChord({
        where: params,
        data: data,
        select: {
          createdAt: true,
          diagram: true,
          fingerPositions: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Chord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Chord",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteChord(
    @common.Param() params: ChordWhereUniqueInput
  ): Promise<Chord | null> {
    try {
      return await this.service.deleteChord({
        where: params,
        select: {
          createdAt: true,
          diagram: true,
          fingerPositions: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/songChords")
  @ApiNestedQuery(SongChordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SongChord",
    action: "read",
    possession: "any",
  })
  async findSongChords(
    @common.Req() request: Request,
    @common.Param() params: ChordWhereUniqueInput
  ): Promise<SongChord[]> {
    const query = plainToClass(SongChordFindManyArgs, request.query);
    const results = await this.service.findSongChords(params.id, {
      ...query,
      select: {
        chord: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        position: true,

        song: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/songChords")
  @nestAccessControl.UseRoles({
    resource: "Chord",
    action: "update",
    possession: "any",
  })
  async connectSongChords(
    @common.Param() params: ChordWhereUniqueInput,
    @common.Body() body: SongChordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      songChords: {
        connect: body,
      },
    };
    await this.service.updateChord({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/songChords")
  @nestAccessControl.UseRoles({
    resource: "Chord",
    action: "update",
    possession: "any",
  })
  async updateSongChords(
    @common.Param() params: ChordWhereUniqueInput,
    @common.Body() body: SongChordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      songChords: {
        set: body,
      },
    };
    await this.service.updateChord({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/songChords")
  @nestAccessControl.UseRoles({
    resource: "Chord",
    action: "update",
    possession: "any",
  })
  async disconnectSongChords(
    @common.Param() params: ChordWhereUniqueInput,
    @common.Body() body: SongChordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      songChords: {
        disconnect: body,
      },
    };
    await this.service.updateChord({
      where: params,
      data,
      select: { id: true },
    });
  }
}
