/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SongService } from "../song.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SongCreateInput } from "./SongCreateInput";
import { Song } from "./Song";
import { SongFindManyArgs } from "./SongFindManyArgs";
import { SongWhereUniqueInput } from "./SongWhereUniqueInput";
import { SongUpdateInput } from "./SongUpdateInput";
import { SongChordFindManyArgs } from "../../songChord/base/SongChordFindManyArgs";
import { SongChord } from "../../songChord/base/SongChord";
import { SongChordWhereUniqueInput } from "../../songChord/base/SongChordWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SongControllerBase {
  constructor(
    protected readonly service: SongService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Song })
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: SongCreateInput,
  })
  async createSong(@common.Body() data: SongCreateInput): Promise<Song> {
    return await this.service.createSong({
      data: {
        ...data,

        artist: data.artist
          ? {
              connect: data.artist,
            }
          : undefined,

        difficultyLevel: data.difficultyLevel
          ? {
              connect: data.difficultyLevel,
            }
          : undefined,

        genre: data.genre
          ? {
              connect: data.genre,
            }
          : undefined,

        language: data.language
          ? {
              connect: data.language,
            }
          : undefined,
      },
      select: {
        artist: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        difficultyLevel: {
          select: {
            id: true,
          },
        },

        genre: {
          select: {
            id: true,
          },
        },

        id: true,

        language: {
          select: {
            id: true,
          },
        },

        lyrics: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Song] })
  @ApiNestedQuery(SongFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async songs(@common.Req() request: Request): Promise<Song[]> {
    const args = plainToClass(SongFindManyArgs, request.query);
    return this.service.songs({
      ...args,
      select: {
        artist: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        difficultyLevel: {
          select: {
            id: true,
          },
        },

        genre: {
          select: {
            id: true,
          },
        },

        id: true,

        language: {
          select: {
            id: true,
          },
        },

        lyrics: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Song })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async song(
    @common.Param() params: SongWhereUniqueInput
  ): Promise<Song | null> {
    const result = await this.service.song({
      where: params,
      select: {
        artist: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        difficultyLevel: {
          select: {
            id: true,
          },
        },

        genre: {
          select: {
            id: true,
          },
        },

        id: true,

        language: {
          select: {
            id: true,
          },
        },

        lyrics: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Song })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: SongUpdateInput,
  })
  async updateSong(
    @common.Param() params: SongWhereUniqueInput,
    @common.Body() data: SongUpdateInput
  ): Promise<Song | null> {
    try {
      return await this.service.updateSong({
        where: params,
        data: {
          ...data,

          artist: data.artist
            ? {
                connect: data.artist,
              }
            : undefined,

          difficultyLevel: data.difficultyLevel
            ? {
                connect: data.difficultyLevel,
              }
            : undefined,

          genre: data.genre
            ? {
                connect: data.genre,
              }
            : undefined,

          language: data.language
            ? {
                connect: data.language,
              }
            : undefined,
        },
        select: {
          artist: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          difficultyLevel: {
            select: {
              id: true,
            },
          },

          genre: {
            select: {
              id: true,
            },
          },

          id: true,

          language: {
            select: {
              id: true,
            },
          },

          lyrics: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Song })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSong(
    @common.Param() params: SongWhereUniqueInput
  ): Promise<Song | null> {
    try {
      return await this.service.deleteSong({
        where: params,
        select: {
          artist: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          difficultyLevel: {
            select: {
              id: true,
            },
          },

          genre: {
            select: {
              id: true,
            },
          },

          id: true,

          language: {
            select: {
              id: true,
            },
          },

          lyrics: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/songChords")
  @ApiNestedQuery(SongChordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SongChord",
    action: "read",
    possession: "any",
  })
  async findSongChords(
    @common.Req() request: Request,
    @common.Param() params: SongWhereUniqueInput
  ): Promise<SongChord[]> {
    const query = plainToClass(SongChordFindManyArgs, request.query);
    const results = await this.service.findSongChords(params.id, {
      ...query,
      select: {
        chord: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        position: true,

        song: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/songChords")
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "update",
    possession: "any",
  })
  async connectSongChords(
    @common.Param() params: SongWhereUniqueInput,
    @common.Body() body: SongChordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      songChords: {
        connect: body,
      },
    };
    await this.service.updateSong({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/songChords")
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "update",
    possession: "any",
  })
  async updateSongChords(
    @common.Param() params: SongWhereUniqueInput,
    @common.Body() body: SongChordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      songChords: {
        set: body,
      },
    };
    await this.service.updateSong({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/songChords")
  @nestAccessControl.UseRoles({
    resource: "Song",
    action: "update",
    possession: "any",
  })
  async disconnectSongChords(
    @common.Param() params: SongWhereUniqueInput,
    @common.Body() body: SongChordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      songChords: {
        disconnect: body,
      },
    };
    await this.service.updateSong({
      where: params,
      data,
      select: { id: true },
    });
  }
}
