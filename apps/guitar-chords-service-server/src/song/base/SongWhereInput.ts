/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ArtistWhereUniqueInput } from "../../artist/base/ArtistWhereUniqueInput";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { DifficultyLevelWhereUniqueInput } from "../../difficultyLevel/base/DifficultyLevelWhereUniqueInput";
import { GenreWhereUniqueInput } from "../../genre/base/GenreWhereUniqueInput";
import { StringFilter } from "../../util/StringFilter";
import { LanguageWhereUniqueInput } from "../../language/base/LanguageWhereUniqueInput";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { SongChordListRelationFilter } from "../../songChord/base/SongChordListRelationFilter";

@InputType()
class SongWhereInput {
  @ApiProperty({
    required: false,
    type: () => ArtistWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ArtistWhereUniqueInput)
  @IsOptional()
  @Field(() => ArtistWhereUniqueInput, {
    nullable: true,
  })
  artist?: ArtistWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => DifficultyLevelWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DifficultyLevelWhereUniqueInput)
  @IsOptional()
  @Field(() => DifficultyLevelWhereUniqueInput, {
    nullable: true,
  })
  difficultyLevel?: DifficultyLevelWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => GenreWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => GenreWhereUniqueInput)
  @IsOptional()
  @Field(() => GenreWhereUniqueInput, {
    nullable: true,
  })
  genre?: GenreWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => LanguageWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => LanguageWhereUniqueInput)
  @IsOptional()
  @Field(() => LanguageWhereUniqueInput, {
    nullable: true,
  })
  language?: LanguageWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lyrics?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => SongChordListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SongChordListRelationFilter)
  @IsOptional()
  @Field(() => SongChordListRelationFilter, {
    nullable: true,
  })
  songChords?: SongChordListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  title?: StringNullableFilter;
}

export { SongWhereInput as SongWhereInput };
